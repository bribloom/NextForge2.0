// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}


 
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}




model Course {

id String @id @default(uuid())
userId String
title String @db.Text
description String? @db.Text
imageUrl String? @db.Text
price Float?

categoryId String?
category Category? @relation(fields: [categoryId], references: [id]) 

chapters Chapter[]
attachment Attachment[]
puchases Purchase[]
badges    Badge[]  // Define the relation back to badges


createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

isPublished Boolean @default(false)//temporary add for fixing issues in route.ts - isPublished: false,


@@index([categoryId])//for model category
@@fulltext([title])

}


model Category{

  id String @id @default(uuid())
  name String
  course Course[]

}


model Attachment{

  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade) //for model course
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])//for model course

}

model Chapter {

  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  
  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

badges    Badge[]  // Define the relation back to badges
  @@index([courseId])
}

model MuxData {

  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

}


model UserProgress {
  id String @id @default(uuid())
  userId String
  


  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId,chapterId])




}

model Purchase {

  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  //unique combination of userid and course for errror: user can buy 2 times in course
  @@unique([userId, courseId])

  @@index([courseId])

}

model Badge {
    id String @id @default(uuid())
    userId    String
    chapterId String
    courseId  String
         course    Course   @relation(fields: [courseId], references: [id]) // Define the relation
         chapter    Chapter  @relation(fields: [chapterId], references: [id]) // Ensure this line exists

    createdAt DateTime @default(now())
}